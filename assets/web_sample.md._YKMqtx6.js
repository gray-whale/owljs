import{_ as s,c as a,o as i,V as n}from"./chunks/framework.wNZV4omV.js";const b=JSON.parse('{"title":"配置采样","description":"","frontmatter":{},"headers":[],"relativePath":"web/sample.md","filePath":"web/sample.md","lastUpdated":1705385179000}'),e={name:"web/sample.md"},l=n(`<h1 id="配置采样" tabindex="-1">配置采样 <a class="header-anchor" href="#配置采样" aria-label="Permalink to &quot;配置采样&quot;">​</a></h1><p>有些场景下只希望上报部分数据，可以称为采样。</p><h2 id="采样方式" tabindex="-1">采样方式 <a class="header-anchor" href="#采样方式" aria-label="Permalink to &quot;采样方式&quot;">​</a></h2><ul><li>在SDK插件中配置过滤：一般用于简单的采样需求。</li><li>在beforeSend中过滤：常见的采样方式，使用简单，灵活性强。</li><li>在SDK初始化时配置sample字段：常用于规则采样，可以指定任意事件和任意规则，配置任意的采样率。</li><li>在平台上配置采样：同样可以指定任意事件和任意规则，配置任意的采样率，同时无需发版，动态下发。</li></ul><h2 id="在sdk插件中配置过滤" tabindex="-1">在SDK插件中配置过滤 <a class="header-anchor" href="#在sdk插件中配置过滤" aria-label="Permalink to &quot;在SDK插件中配置过滤&quot;">​</a></h2><p>部分插件提供了一些过滤选项，可以针对简单的内容进行过滤，命中过滤则直接不上报。</p><p>例如，JS错误插件提供了按照错误信息过滤的配置项。完成以下配置，可以不上报指定的符合条件的JS错误。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> browserClient  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@owl-js/web&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">browserClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;init&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    jsError: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ignoreErrors: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Failed to fetch&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="在beforesend中过滤" tabindex="-1">在beforeSend中过滤 <a class="header-anchor" href="#在beforesend中过滤" aria-label="Permalink to &quot;在beforeSend中过滤&quot;">​</a></h2><p>SDK提供了多个生命周期，其中beforeSend是自定义采样时常用的生命周期，每一个需要上报的事件都会完成beforeSend生命周期。在回调里返回false、null或者undefined，就不会上报该事件到平台上。</p><p>例如，完成以下配置，当页面地址中包含test，该页面发生的JS错误就不上报。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> browserClient  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@owl-js/web&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> browserClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;on&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;beforeSend&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ev</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ev.ev_type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;js_error&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ev.common.url.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 不再上报</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ev </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 继续上报</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>ev的具体类型，除了查看ts提示，还可以查看@owl-js/web导出的类型BrowserSendEvent。</p><h2 id="在sdk初始化时配置sample字段" tabindex="-1">在SDK初始化时配置sample字段 <a class="header-anchor" href="#在sdk初始化时配置sample字段" aria-label="Permalink to &quot;在SDK初始化时配置sample字段&quot;">​</a></h2><p>您可以在init时传入sample对象来配置采样。</p><p><strong>字段说明</strong></p><table><thead><tr><th>字段</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>sample_rate</td><td>number</td><td>总采样率，对所有事件生效。</td></tr><tr><td>include_users</td><td>string[]</td><td>用户白名单，命中的用户会直接上报所有字段。</td></tr><tr><td>sample_granularity</td><td>string</td><td>采样模式。session（默认）：按照会话粒度采样。event：按照事件粒度采样。</td></tr><tr><td>rules</td><td><code>{ [key: string]: EventSampleRule }</code></td><td>规则采样，针对不同事件类型来特殊配置，key为事件类型。pageview、http、resource...、所有的插件名都是事件类型，如果您想查看事件类型的全部取值，请参见配置插件。</td></tr></tbody></table>`,17),t=[l];function p(r,h,k,d,E,o){return i(),a("div",null,t)}const g=s(e,[["render",p]]);export{b as __pageData,g as default};
